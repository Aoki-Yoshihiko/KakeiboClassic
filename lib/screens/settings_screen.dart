import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import '../models/transaction.dart'; // TransactionTypeÁî®
import '../services/transaction_service.dart';
import 'data_management_screen.dart';

class SettingsScreen extends ConsumerWidget {
  const SettingsScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final transactions = ref.watch(transactionServiceProvider);
    
    // Áµ±Ë®àÊÉÖÂ†±
    final totalTransactions = transactions.length;
    final totalIncome = transactions
        .where((t) => t.type == TransactionType.income)
        .fold(0.0, (sum, t) => sum + t.amount);
    final totalExpense = transactions
        .where((t) => t.type == TransactionType.expense)
        .fold(0.0, (sum, t) => sum + t.amount);
    final fixedItemsCount = transactions.where((t) => t.isFixedItem).length;

    return Scaffold(
      appBar: AppBar(
        title: const Text('Ë®≠ÂÆö'),
      ),
      body: ListView(
        children: [
          // „Ç¢„Éó„É™ÊÉÖÂ†±„Çª„ÇØ„Ç∑„Éß„É≥
          _buildSection(
            title: '„Ç¢„Éó„É™ÊÉÖÂ†±',
            children: [
              ListTile(
                leading: const Icon(Icons.info_outline),
                title: const Text('ÂÆ∂Ë®àÁ∞ø„ÄúÊöÆ„Çâ„Åó„Å£„Åè'),
                subtitle: const Text('„Éê„Éº„Ç∏„Éß„É≥ 1.0.0'),
                trailing: const Icon(Icons.chevron_right),
                onTap: () => _showAboutDialog(context),
              ),
            ],
          ),

          // „Éá„Éº„ÇøÁÆ°ÁêÜ„Çª„ÇØ„Ç∑„Éß„É≥
          _buildSection(
            title: '„Éá„Éº„ÇøÁÆ°ÁêÜ',
            children: [
              ListTile(
                leading: const Icon(Icons.backup),
                title: const Text('„Éá„Éº„ÇøÁÆ°ÁêÜ'),
                subtitle: const Text('„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„ÉªÂæ©ÂÖÉ'),
                trailing: const Icon(Icons.chevron_right),
                onTap: () => Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => const DataManagementScreen(),
                  ),
                ),
              ),
            ],
          ),

          // Áµ±Ë®àÊÉÖÂ†±„Çª„ÇØ„Ç∑„Éß„É≥
          _buildSection(
            title: 'Áµ±Ë®àÊÉÖÂ†±',
            children: [
              ListTile(
                leading: const Icon(Icons.analytics_outlined),
                title: const Text('ÂèñÂºï‰ª∂Êï∞'),
                subtitle: Text('$totalTransactions‰ª∂'),
              ),
              ListTile(
                leading: const Icon(Icons.trending_up, color: Colors.green),
                title: const Text('Á∑èÂèéÂÖ•'),
                subtitle: Text('${NumberFormat('#,###').format(totalIncome.round())}ÂÜÜ'),
              ),
              ListTile(
                leading: const Icon(Icons.trending_down, color: Colors.red),
                title: const Text('Á∑èÊîØÂá∫'),
                subtitle: Text('${NumberFormat('#,###').format(totalExpense.round())}ÂÜÜ'),
              ),
              ListTile(
                leading: Icon(
                  (totalIncome - totalExpense) >= 0 
                      ? Icons.savings 
                      : Icons.warning,
                  color: (totalIncome - totalExpense) >= 0 
                      ? Colors.green 
                      : Colors.red,
                ),
                title: const Text('Á∑èÂèéÊîØ'),
                subtitle: Text(
                  '${(totalIncome - totalExpense) >= 0 ? '+' : ''}${NumberFormat('#,###').format((totalIncome - totalExpense).round())}ÂÜÜ',
                  style: TextStyle(
                    color: (totalIncome - totalExpense) >= 0 
                        ? Colors.green 
                        : Colors.red,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              ListTile(
                leading: const Icon(Icons.repeat),
                title: const Text('Âõ∫ÂÆöÈ†ÖÁõÆÊï∞'),
                subtitle: Text('$fixedItemsCount‰ª∂'),
              ),
            ],
          ),

          // Ê©üËÉΩÁ¥π‰ªã„Çª„ÇØ„Ç∑„Éß„É≥
          _buildSection(
            title: 'Ê©üËÉΩÁ¥π‰ªã',
            children: [
              ListTile(
                leading: const Icon(Icons.lightbulb_outline),
                title: const Text('‰Ωø„ÅÑÊñπ„ÅÆ„Éí„É≥„Éà'),
                subtitle: const Text('ÂäπÁéáÁöÑ„Å™‰Ωø„ÅÑÊñπ„ÇíÁ¢∫Ë™ç'),
                trailing: const Icon(Icons.chevron_right),
                onTap: () => _showTipsDialog(context),
              ),
            ],
          ),

          const SizedBox(height: 32),
        ],
      ),
    );
  }

  Widget _buildSection({required String title, required List<Widget> children}) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.fromLTRB(16, 24, 16, 8),
          child: Text(
            title,
            style: const TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.bold,
              color: Colors.grey,
            ),
          ),
        ),
        Card(
          margin: const EdgeInsets.symmetric(horizontal: 16),
          child: Column(children: children),
        ),
      ],
    );
  }

  void _showAboutDialog(BuildContext context) {
    showAboutDialog(
      context: context,
      applicationName: 'ÂÆ∂Ë®àÁ∞ø„ÄúÊöÆ„Çâ„Åó„Å£„Åè',
      applicationVersion: '1.0.0',
      applicationIcon: const Icon(Icons.account_balance_wallet, size: 48),
      children: [
        const Text('„Ç∑„É≥„Éó„É´„Åß‰Ωø„ÅÑ„ÇÑ„Åô„ÅÑÂÆ∂Ë®àÁ∞ø„Ç¢„Éó„É™„Åß„Åô„ÄÇ'),
        const SizedBox(height: 16),
        const Text('‰∏ª„Å™Ê©üËÉΩ:'),
        const Text('‚Ä¢ ÂèéÂÖ•„ÉªÊîØÂá∫„ÅÆË®òÈå≤'),
        const Text('‚Ä¢ Âõ∫ÂÆöÈ†ÖÁõÆ„ÅÆË®≠ÂÆö'),
        const Text('‚Ä¢ ÊúàÂà•„ÉªÊúüÈñìÂà•ÈõÜË®à'),
        const Text('‚Ä¢ „Éá„Éº„Çø„ÅÆ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó'),
      ],
    );
  }

  void _showTipsDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('üí° ‰Ωø„ÅÑÊñπ„ÅÆ„Éí„É≥„Éà'),
        content: const SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('üìÖ Âõ∫ÂÆöÈ†ÖÁõÆ„ÅÆÊ¥ªÁî®', style: TextStyle(fontWeight: FontWeight.bold)),
              Text('Áµ¶Êñô„ÇÑÂÆ∂Ë≥É„Å™„Å©ÊØéÊúàÁô∫Áîü„Åô„ÇãÈ†ÖÁõÆ„ÅØ„ÄåÂõ∫ÂÆö„Å®„Åó„Å¶Ë®≠ÂÆö„Äç„Çí„Ç™„É≥„Å´„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ'),
              SizedBox(height: 12),
              
              Text('üìÜ Áô∫ÁîüÊó•„ÅÆË®≠ÂÆö', style: TextStyle(fontWeight: FontWeight.bold)),
              Text('Âõ∫ÂÆöÈ†ÖÁõÆ„Åß„ÅØÁô∫ÁîüÊó•„Çí1„Äú31Êó•„ÅßË®≠ÂÆö„Åß„Åç„Åæ„Åô„ÄÇÊúàÊú´Êó•„ÇíË∂Ö„Åà„ÇãÂ†¥Âêà„ÅØËá™ÂãïË™øÊï¥„Åï„Çå„Åæ„Åô„ÄÇ'),
              SizedBox(height: 12),
              
              Text('üèñÔ∏è ‰ºëÊó•Âá¶ÁêÜ', style: TextStyle(fontWeight: FontWeight.bold)),
              Text('Âõ∫ÂÆöÈ†ÖÁõÆ„Åß‰ºëÊó•„ÅÆÂ†¥Âêà„ÅÆÂá¶ÁêÜÔºàÂâçÂñ∂Ê•≠Êó•„ÉªÂæåÂñ∂Ê•≠Êó•Ôºâ„ÇíË®≠ÂÆö„Åß„Åç„Åæ„Åô„ÄÇ'),
              SizedBox(height: 12),
              
              Text('üí∞ ÈáëÈ°çË°®Á§∫„ÅÆÂàá„ÇäÊõø„Åà', style: TextStyle(fontWeight: FontWeight.bold)),
              Text('‰∫àÂÆö„Çø„Éñ„Åß„ÅÆÈáëÈ°çË°®Á§∫„ÅØON/OFF„ÅßÂàá„ÇäÊõø„Åà„Çâ„Çå„Åæ„Åô„ÄÇ'),
              SizedBox(height: 12),
              
              Text('‚úÖ ‰∫àÂÆö„ÅÆÁ¢∫ÂÆö', style: TextStyle(fontWeight: FontWeight.bold)),
              Text('‰∫àÂÆöÈ†ÖÁõÆ„ÇíÂ∑¶„Å´„Çπ„ÉØ„Ç§„Éó„Åô„Çã„Å®ÂÆüÁ∏æ„Å´Á¢∫ÂÆö„Åß„Åç„Åæ„Åô„ÄÇ'),
              SizedBox(height: 12),
              
              Text('üìä ÊúüÈñìÈõÜË®à', style: TextStyle(fontWeight: FontWeight.bold)),
              Text('„Çµ„Éû„É™„ÉºÁîªÈù¢„Åß„ÅØÊúüÈñì„Å®È†ÖÁõÆ„ÇíÊåáÂÆö„Åó„Å¶Ë©≥Á¥∞„Å™ÂàÜÊûê„Åå„Åß„Åç„Åæ„Åô„ÄÇ'),
              SizedBox(height: 12),
              
              Text('üíæ „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó', style: TextStyle(fontWeight: FontWeight.bold)),
              Text('ÂÆöÊúüÁöÑ„Å´„Éá„Éº„Çø„Çí„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åó„Å¶Â§ßÂàá„Å™„Éá„Éº„Çø„Çí‰øùË≠∑„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ'),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Èñâ„Åò„Çã'),
          ),
        ],
      ),
    );
  }
}